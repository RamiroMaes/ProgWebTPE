// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createClub = `-- name: CreateClub :one
INSERT INTO Club (Nombre, Ciudad)
VALUES ($1, $2)
RETURNING Nombre, Ciudad
`

type CreateClubParams struct {
	Nombre string `json:"nombre"`
	Ciudad string `json:"ciudad"`
}

func (q *Queries) CreateClub(ctx context.Context, arg CreateClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, createClub, arg.Nombre, arg.Ciudad)
	var i Club
	err := row.Scan(&i.Nombre, &i.Ciudad)
	return i, err
}

const createJugador = `-- name: CreateJugador :one

INSERT INTO Jugador (Nombre, iD_Jugador, Posicion,Fecha_Nacimiento, Altura, Pais_Nombre)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING Nombre, iD_Jugador, Posicion,Fecha_Nacimiento, Altura, Pais_Nombre
`

type CreateJugadorParams struct {
	Nombre          string    `json:"nombre"`
	IDJugador       int32     `json:"id_jugador"`
	Posicion        string    `json:"posicion"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Altura          string    `json:"altura"`
	PaisNombre      string    `json:"pais_nombre"`
}

// Una consulta para crear un nuevo registro (Create...) usando el csv "plantelRiverPlate.csv"
func (q *Queries) CreateJugador(ctx context.Context, arg CreateJugadorParams) (Jugador, error) {
	row := q.db.QueryRowContext(ctx, createJugador,
		arg.Nombre,
		arg.IDJugador,
		arg.Posicion,
		arg.FechaNacimiento,
		arg.Altura,
		arg.PaisNombre,
	)
	var i Jugador
	err := row.Scan(
		&i.Nombre,
		&i.IDJugador,
		&i.Posicion,
		&i.FechaNacimiento,
		&i.Altura,
		&i.PaisNombre,
	)
	return i, err
}

const createLesion = `-- name: CreateLesion :one
INSERT INTO Lesion (Tipo_Lesion, Descripcion)
VALUES ($1, $2)
RETURNING Tipo_Lesion, Descripcion
`

type CreateLesionParams struct {
	TipoLesion  string `json:"tipo_lesion"`
	Descripcion string `json:"descripcion"`
}

func (q *Queries) CreateLesion(ctx context.Context, arg CreateLesionParams) (Lesion, error) {
	row := q.db.QueryRowContext(ctx, createLesion, arg.TipoLesion, arg.Descripcion)
	var i Lesion
	err := row.Scan(&i.TipoLesion, &i.Descripcion)
	return i, err
}

const createPais = `-- name: CreatePais :one
INSERT INTO Pais(Nombre)
VALUES ($1)
RETURNING Nombre
`

func (q *Queries) CreatePais(ctx context.Context, nombre string) (string, error) {
	row := q.db.QueryRowContext(ctx, createPais, nombre)
	err := row.Scan(&nombre)
	return nombre, err
}

const deleteClub = `-- name: DeleteClub :exec
DELETE FROM Club
WHERE Nombre = $1 AND Ciudad = $2
`

type DeleteClubParams struct {
	Nombre string `json:"nombre"`
	Ciudad string `json:"ciudad"`
}

func (q *Queries) DeleteClub(ctx context.Context, arg DeleteClubParams) error {
	_, err := q.db.ExecContext(ctx, deleteClub, arg.Nombre, arg.Ciudad)
	return err
}

const deleteJugador = `-- name: DeleteJugador :exec
DELETE FROM Jugador
WHERE iD_Jugador = $1 AND Nombre = $2
`

type DeleteJugadorParams struct {
	IDJugador int32  `json:"id_jugador"`
	Nombre    string `json:"nombre"`
}

// Una consulta para borrar un registro (Delete...).
func (q *Queries) DeleteJugador(ctx context.Context, arg DeleteJugadorParams) error {
	_, err := q.db.ExecContext(ctx, deleteJugador, arg.IDJugador, arg.Nombre)
	return err
}

const deleteLesion = `-- name: DeleteLesion :exec
DELETE FROM Lesion
WHERE Tipo_Lesion = $1
`

func (q *Queries) DeleteLesion(ctx context.Context, tipoLesion string) error {
	_, err := q.db.ExecContext(ctx, deleteLesion, tipoLesion)
	return err
}

const getClub = `-- name: GetClub :one
SELECT nombre, ciudad FROM Club
WHERE Nombre = $1 AND Ciudad = $2
`

type GetClubParams struct {
	Nombre string `json:"nombre"`
	Ciudad string `json:"ciudad"`
}

func (q *Queries) GetClub(ctx context.Context, arg GetClubParams) (Club, error) {
	row := q.db.QueryRowContext(ctx, getClub, arg.Nombre, arg.Ciudad)
	var i Club
	err := row.Scan(&i.Nombre, &i.Ciudad)
	return i, err
}

const getJugador = `-- name: GetJugador :one

SELECT nombre, id_jugador, posicion, fecha_nacimiento, altura, pais_nombre FROM Jugador
WHERE iD_Jugador = $1
`

// Una consulta para obtener un registro por su ID (Get...).
func (q *Queries) GetJugador(ctx context.Context, idJugador int32) (Jugador, error) {
	row := q.db.QueryRowContext(ctx, getJugador, idJugador)
	var i Jugador
	err := row.Scan(
		&i.Nombre,
		&i.IDJugador,
		&i.Posicion,
		&i.FechaNacimiento,
		&i.Altura,
		&i.PaisNombre,
	)
	return i, err
}

const getLesion = `-- name: GetLesion :one
SELECT tipo_lesion, descripcion FROM Lesion
WHERE Tipo_Lesion = $1
`

func (q *Queries) GetLesion(ctx context.Context, tipoLesion string) (Lesion, error) {
	row := q.db.QueryRowContext(ctx, getLesion, tipoLesion)
	var i Lesion
	err := row.Scan(&i.TipoLesion, &i.Descripcion)
	return i, err
}

const listClubs = `-- name: ListClubs :many
SELECT nombre, ciudad FROM Club
`

func (q *Queries) ListClubs(ctx context.Context) ([]Club, error) {
	rows, err := q.db.QueryContext(ctx, listClubs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Club
	for rows.Next() {
		var i Club
		if err := rows.Scan(&i.Nombre, &i.Ciudad); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listJugadores = `-- name: ListJugadores :many

SELECT nombre, id_jugador, posicion, fecha_nacimiento, altura, pais_nombre FROM Jugador
`

// Una consulta para listar todos los registros (List...).
func (q *Queries) ListJugadores(ctx context.Context) ([]Jugador, error) {
	rows, err := q.db.QueryContext(ctx, listJugadores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Jugador
	for rows.Next() {
		var i Jugador
		if err := rows.Scan(
			&i.Nombre,
			&i.IDJugador,
			&i.Posicion,
			&i.FechaNacimiento,
			&i.Altura,
			&i.PaisNombre,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLesiones = `-- name: ListLesiones :many
SELECT tipo_lesion, descripcion FROM Lesion
`

func (q *Queries) ListLesiones(ctx context.Context) ([]Lesion, error) {
	rows, err := q.db.QueryContext(ctx, listLesiones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lesion
	for rows.Next() {
		var i Lesion
		if err := rows.Scan(&i.TipoLesion, &i.Descripcion); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClub = `-- name: UpdateClub :exec
UPDATE Club
SET Nombre = $1, Ciudad = $2
WHERE Nombre = $3 AND Ciudad = $4
`

type UpdateClubParams struct {
	Nombre   string `json:"nombre"`
	Ciudad   string `json:"ciudad"`
	Nombre_2 string `json:"nombre_2"`
	Ciudad_2 string `json:"ciudad_2"`
}

// Preguntar
func (q *Queries) UpdateClub(ctx context.Context, arg UpdateClubParams) error {
	_, err := q.db.ExecContext(ctx, updateClub,
		arg.Nombre,
		arg.Ciudad,
		arg.Nombre_2,
		arg.Ciudad_2,
	)
	return err
}

const updateJugador = `-- name: UpdateJugador :exec

UPDATE Jugador
SET Posicion = $1, Fecha_Nacimiento = $2, Altura = $3, Pais_Nombre = $4
WHERE iD_Jugador = $5 AND Nombre = $6
`

type UpdateJugadorParams struct {
	Posicion        string    `json:"posicion"`
	FechaNacimiento time.Time `json:"fecha_nacimiento"`
	Altura          string    `json:"altura"`
	PaisNombre      string    `json:"pais_nombre"`
	IDJugador       int32     `json:"id_jugador"`
	Nombre          string    `json:"nombre"`
}

// Una consulta para actualizar un registro (Update...).
func (q *Queries) UpdateJugador(ctx context.Context, arg UpdateJugadorParams) error {
	_, err := q.db.ExecContext(ctx, updateJugador,
		arg.Posicion,
		arg.FechaNacimiento,
		arg.Altura,
		arg.PaisNombre,
		arg.IDJugador,
		arg.Nombre,
	)
	return err
}

const updateLesion = `-- name: UpdateLesion :exec
UPDATE Lesion
SET Descripcion = $1
WHERE Tipo_Lesion = $2
`

type UpdateLesionParams struct {
	Descripcion string `json:"descripcion"`
	TipoLesion  string `json:"tipo_lesion"`
}

func (q *Queries) UpdateLesion(ctx context.Context, arg UpdateLesionParams) error {
	_, err := q.db.ExecContext(ctx, updateLesion, arg.Descripcion, arg.TipoLesion)
	return err
}
